<ContentPage
    x:Class="Hai.MainPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:Hai">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Chat window is above the editor text box and buttons  -->
        <ScrollView
            x:Name="chatScrollView"
            Grid.Row="0"
            VerticalOptions="FillAndExpand">
            <StackLayout
                x:Name="chatLayout"
                Padding="10,5"
                Spacing="5" />
        </ScrollView>

        <!--  Editor text box and buttons are below the chat  -->
        <Frame
            Grid.Row="1"
            Margin="2"
            Padding="2"
            BorderColor="#444654"
            CornerRadius="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Editor
                    x:Name="textInput"
                    Margin="1,1,2,0"
                    AutoSize="TextChanges"
                    HorizontalTextAlignment="Start"
                    IsTextPredictionEnabled="True"
                    Keyboard="Chat"
                    MaxLength="1000"
                    Placeholder="Type Your Message"
                    VerticalOptions="FillAndExpand" />

                <StackLayout Grid.Column="1" Orientation="Horizontal">
                    <ImageButton
                        x:Name="micButton"
                        Padding="0,2,0,2"
                        BackgroundColor="#14bdad"
                        Clicked="OnMicButtonClicked"
                        CornerRadius="8"
                        HeightRequest="40"
                        WidthRequest="40">
                        <ImageButton.Source>
                            <FileImageSource File="mic.png" />
                        </ImageButton.Source>
                    </ImageButton>
                    <ImageButton
                        x:Name="micStopButton"
                        Padding="0,2,0,2"
                        BackgroundColor="#14bdad"
                        Clicked="OnMicStopButtonClicked"
                        CornerRadius="8"
                        HeightRequest="40"
                        IsVisible="False"
                        WidthRequest="40">
                        <ImageButton.Source>
                            <FileImageSource File="stop.png" />
                        </ImageButton.Source>
                    </ImageButton>
                    <ImageButton
                        x:Name="sendButton"
                        Padding="0,2,0,2"
                        BackgroundColor="#14bdad"
                        Clicked="OnSendButtonClicked"
                        CornerRadius="8"
                        HeightRequest="40"
                        IsVisible="False"
                        WidthRequest="40">
                        <ImageButton.Source>
                            <FileImageSource File="send.png" />
                        </ImageButton.Source>
                    </ImageButton>
                </StackLayout>
            </Grid>
        </Frame>
        <TabbedPage.ItemTemplate />
    </Grid>
</ContentPage>

private async Task DisplayMessage(string message, bool isUser, bool isAi)
    {
        Debug.WriteLine("DisplayMessage method started");

        var userLogoImage = new Image
        {
            Source = "user.png",
            HeightRequest = 30,
            WidthRequest = 30,
            Margin = new Thickness(5, 0),
            BackgroundColor = Color.FromRgb(20, 189, 173),
            Aspect = Aspect.AspectFill
        };

        var chatbotLogoImage = new Image
        {
            Source = "chatbot.png",
            HeightRequest = 30,
            WidthRequest = 30,
            Margin = new Thickness(5, 0),
            BackgroundColor = Color.FromRgb(20, 189, 173),
            Aspect = Aspect.AspectFill
        };

        var messageEditor = new Editor
        {
            Text = message,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            VerticalOptions = LayoutOptions.StartAndExpand,
            IsReadOnly = true,
            BackgroundColor = new Microsoft.Maui.Graphics.Color(0, 0, 0, 0) // Transparent color
        };

        var copyButtonImage = new Image
        {
            Source = "copy_96.png",
            HeightRequest = 25,
            WidthRequest = 25,
            IsAnimationPlaying = true,
            VerticalOptions = LayoutOptions.End,
            Margin = new Thickness(5, 0),
            BackgroundColor = Color.FromRgb(20, 189, 173),
            Aspect = Aspect.AspectFill
        };

        var gestureRecognizer = new TapGestureRecognizer();
        gestureRecognizer.Tapped += (s, e) => { Clipboard.SetTextAsync(messageEditor.Text); };
        copyButtonImage.GestureRecognizers.Add(gestureRecognizer);

        var userLogoStackLayout = new StackLayout
        {
            Orientation = StackOrientation.Vertical,
            HorizontalOptions = LayoutOptions.End,
            Margin = new Thickness(1),
            Padding = new Thickness(2)
        };
        userLogoStackLayout.Children.Add(userLogoImage);

        var chatbotLogoStackLayout = new StackLayout
        {
            Orientation = StackOrientation.Vertical,
            HorizontalOptions = LayoutOptions.Start,
            Margin = new Thickness(1),
            Padding = new Thickness(2)
        };
        chatbotLogoStackLayout.Children.Add(chatbotLogoImage);

        var copyButtonStackLayout = new StackLayout
        {
            Orientation = StackOrientation.Vertical,
            HorizontalOptions = LayoutOptions.End,
            VerticalOptions= LayoutOptions.End,
            Margin = new Thickness(1),
            Padding = new Thickness(2)
        };
        copyButtonStackLayout.Children.Add(copyButtonImage);

        var grid = new Grid
        {
            ColumnDefinitions = new ColumnDefinitionCollection
            {
                new ColumnDefinition { Width = GridLength.Auto },
                new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) }
            },

            RowDefinitions = new RowDefinitionCollection
            {
                new RowDefinition { Height = GridLength.Auto },
                new RowDefinition { Height = GridLength.Auto }
            },
            HorizontalOptions = LayoutOptions.FillAndExpand
        };

        if (!isAi)
        {
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
            //grid.ColumnDefinitions.Insert(0, new ColumnDefinition { Width = GridLength.Auto });

            grid.Children.Add(messageEditor);
            grid.Children.Add(userLogoStackLayout);
            grid.Children.Add(copyButtonStackLayout);

            Grid.SetColumn(messageEditor, 0);
            Grid.SetRowSpan(messageEditor, 2);

            Grid.SetColumn(userLogoStackLayout, 1);
            Grid.SetRow(userLogoStackLayout, 0);

            Grid.SetColumn(copyButtonStackLayout, 1);
            Grid.SetRow(copyButtonStackLayout, 1);
        }
        else
        {
            //grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });
            grid.ColumnDefinitions.Insert(0, new ColumnDefinition { Width = GridLength.Auto });

            grid.Children.Add(chatbotLogoStackLayout);
            grid.Children.Add(messageEditor);
            grid.Children.Add(copyButtonStackLayout);

            Grid.SetColumn(chatbotLogoStackLayout, 0);
            Grid.SetRow(chatbotLogoStackLayout, 0);

            Grid.SetColumn(copyButtonStackLayout, 0);
            Grid.SetRow(copyButtonStackLayout, 1);

            Grid.SetColumn(messageEditor, 1);
            Grid.SetRowSpan(messageEditor, 2);

        }

        var frame = new Frame
        {
            Content = grid,
            BorderColor = Microsoft.Maui.Graphics.Color.FromRgb(68, 70, 84),
            BackgroundColor = new Color(0, 0, 0, 0), // Transparent color
            CornerRadius = 10,
            Padding = new Thickness(10),
            Margin = new Thickness(10, 5)
        };

        chatLayout.Children.Add(frame);

        await Task.Delay(100); // Add a delay of 100 milliseconds

        if (chatScrollView != null && frame != null)
        {
            _ = chatScrollView.ScrollToAsync(frame, ScrollToPosition.End, animated: true).ConfigureAwait(true);
        }

        Debug.WriteLine("DisplayMessage method finished");
    }


                    //RecognitionText = await speechToText.Listen(CultureInfo.GetCultureInfo("en-us"),
                //    new Progress<string>(partialText =>
                //    {
                //        if (DeviceInfo.Platform == DevicePlatform.Android)
                //        {
                //            RecognitionText = partialText;
                //        }
                //        else if (DeviceInfo.Platform == DevicePlatform.iOS
                //        || DeviceInfo.Platform == DevicePlatform.WinUI)
                //        {
                //            RecognitionText = partialText;
                //        }
                //        Console.WriteLine("RecognitionText is this: " + RecognitionText);
                //        OnPropertyChanged(nameof(RecognitionText));
                //    }), tokenSource.Token);



we will recreate this, from begining:

Elements:
1. we get messages from user and chatbot we have to handle both.
2. messages should be in editor text box, it should be selectable by user and width and should be adjustable.
3. the logos for user=user.png, for chatbot=chatbot, for copy=copy_96.png.

Design:
A. for isUser:
	1. add to 2 stacks one beside one, means one is for left other for right.
	2. where both stacks should be vertically scrollable.
	3. first stack should have editor which having message.
	4. in secoend stack add user and copy images, which make user image at top and copy image just belove that.
B. for isAi os !isUser:
	1. add to 2 stacks one beside one, means one is for left other for right.
	2. where both stacks should be vertically scrollable.
	3. in first stack add chatbot and copy images, which make chatbot image at top and copy image just belove that.
	4. secoend stack should have editor which having message.


    private async Task StartListening()
    {
        // Update button visibility
        micButton.IsVisible = false;
        micStopButton.IsVisible = true;

        // Request microphone permissions
        var isAuthorized = await speechToText.RequestPermissions();

        if (isAuthorized)
        {
            try
            {
                Console.WriteLine("before the startlistening");

                RecognitionText = await speechToText.Listen(CultureInfo.GetCultureInfo("en-us"),
                new Progress<string>(partialText =>
                {
                    if (DeviceInfo.Platform == DevicePlatform.Android ||
                        DeviceInfo.Platform == DevicePlatform.iOS ||
                        DeviceInfo.Platform == DevicePlatform.WinUI)
                    {
                        Device.BeginInvokeOnMainThread(() =>
                        {
                            textInput.Text = partialText;
                        });
                    }

                    Console.WriteLine("RecognitionText is this: " + RecognitionText);
                    OnPropertyChanged(nameof(RecognitionText));
                }), tokenSource.Token);

                Console.WriteLine("okkk " + " " + RecognitionText);
                // Process the final recognized text as needed
                textInput.Text = string.Empty;
                await DisplayMessage(RecognitionText, isUser: true, isAi: false);

                string responseText = await GenerateResponse(RecognitionText);

                await DisplayMessage(responseText, isUser: false, isAi: true);
            }
            catch (Exception ex)
            {
                // Handle any errors that occurred during speech recognition
                await DisplayAlert("Error", ex.Message, "OK");
            }
        }
        else
        {
            // Display an alert if microphone access is not granted
            await DisplayAlert("Permission Error", "No microphone access", "OK");
        }
        micButton.IsVisible = true;
        micStopButton.IsVisible = false;
    }